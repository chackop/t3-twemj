import { SignIn, SignOutButton, UserButton, useUser } from "@clerk/nextjs";
import Head from "next/head";
import { useState } from "react";
import toast from "react-hot-toast";
import { PageLayout } from "~/components/layout";
import { LoadingPage, LoadingSpinner } from "~/components/loading";
import { PostView } from "~/components/postview";

import { api } from "~/utils/api";

const CreatePostWizard = () => {
  const { user } = useUser();

  const [input, setInput] = useState("");

  const ctx = api.useUtils();

  const { mutate, isLoading } = api.post.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.post.getAll.invalidate();
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors.content;
      if (errorMessage?.[0]) {
        toast.error(errorMessage[0]);
      } else {
        toast.error("Failed to post! Please try again later.");
      }
    },
  });

  if (!user) return null;

  return (
    <div className="flex w-full gap-3">
      <UserButton
        appearance={{
          elements: {
            userButtonAvatarBox: {
              width: 56,
              height: 56,
            },
          },
        }}
      />

      <input
        placeholder="Enter Event Title"
        className="grow bg-transparent outline-none"
        type="text"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        onKeyDown={(e) => {
          if (e.key === "Enter") {
            e.preventDefault();

            if (input !== "") {
              mutate({ title: input });
            }
          }
        }}
        disabled={isLoading}
      />

      {input !== "" && !isLoading && (
        <button onClick={() => mutate({ title: input })}>Post</button>
      )}

      {isLoading && (
        <div className="flex items-center justify-center">
          <LoadingSpinner size={20} />
        </div>
      )}
    </div>
  );
};

const Feed = () => {
  const { data, isLoading } = api.post.getAll.useQuery();

  if (isLoading)
    return (
      <div className="flex grow">
        <LoadingPage />
      </div>
    );

  if (!data) return <div>Something went wrong</div>;

  return (
    <div className="flex grow flex-col overflow-y-scroll">
      {data?.map((dataItem) => (
        <PostView {...dataItem} key={dataItem.post.id} />
        // <div key={dataItem.post.id}>{dataItem.post.title}</div>
      ))}
    </div>
  );
};

export default function Home() {
  const { isSignedIn, isLoaded } = useUser();

  // Start fetching asap
  api.post.getAll.useQuery();

  // Return empty div if user isn't loaded
  if (!isLoaded) return <div />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageLayout>
        <div className="flex border-b border-slate-400 p-4">
          {isSignedIn ? <CreatePostWizard /> : <SignIn />}
        </div>

        <Feed />
      </PageLayout>
    </>
  );
}
